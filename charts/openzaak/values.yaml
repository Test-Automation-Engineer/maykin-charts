global:
  configuration:
    enabled: false
    overwrite: true
    organization: Gemeente Example
    openzaakAutorisatiesApi: https://openzaak.example.nl/autorisaties/api/v1/
    notificatiesApi: http://opennotificaties.example.nl/api/v1/
    notificatiesOpenzaakClientId: notif-client-id
    notificatiesOpenzaakSecret: notif-secret
    openzaakNotificatiesClientId: oz-client-id
    openzaakNotificatiesSecret: oz-secret

  settings:
    # -- Global databasehost, overrides setting.database.host
    databaseHost: ""

configuration:
  enabled: false
  overwrite: true
  sites:
    enabled: false
    openzaakDomain: ""
    organization: ""
  notificatiesAuthorization:
    enabled: false
    notificationOpenzaakClientId: ""
    notifcationOpenzaakSecret: ""
  notificaties:
    enabled: false
    ApiRoot: ""
    openzaakNotifcationClientId: ""
    openzaakNotificationSecret: ""
    # Run the manage.py register_kanalen command, runs in cron job only
    registerKanalen: false
  selectieLijst:
    enabled: false
    ApiRoot: https://selectielijst.openzaak.nl/api/v1/
    ApiOas: https://selectielijst.openzaak.nl/api/v1/schema/openapi.yaml
    AllowedYears: [2017, 2020]
    DefaultYear: 2020
  superuser:
    username: ""
    password: ""
    email: ""
  initContainer:
    # -- Run the setup configuration command in a init container
    enabled: true
  job:
    # -- Run the setup configuration command as a job
    enabled: false
    backoffLimit: 6
    restartPolicy: OnFailure
    resources: {}
      # limits:
      #   cpu: 200m
      #   memory: 256Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

tags:
  redis: true

replicaCount: 1

image:
  repository: openzaak/open-zaak
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

podAnnotations: {}

podLabels: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  className: ""
  # -- ingress hosts
  hosts: []
  #  - host: openformulieren.gemeente.nl
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  tls: []
  #  - secretName: openzaak-tls
  #    hosts:
  #      - openformulieren.gemeente.nl

# -- Specify extra ingresses, for example if you have multiple ingress classes
extraIngress: []
# e.g:
# extraIngress:
#  - name: openzaak-azuregateway
#    annotations:
#      appgw.ingress.kubernetes.io/ssl-redirect: "true"
#    className: azure-application-gateway
#    hosts:
#      - host: openzaak.gemeente.nl
#        paths:
#          - path: /
#            pathType: ImplementationSpecific
#            servicename: openzaak
#            portNumber: 8000
#    tls:
#      - secretName: openzaak-tls
#        hosts:
#          - "openzaak.gemeente.nl"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 200m
  #   memory: 256Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  enabled: true
  size: 1Gi
  storageClassName: ""
  existingClaim: null
  mediaMountSubpath: openzaak/media
  privateMediaMountSubpath: openzaak/private_media

# Existing Secret must be defined for AzureVaultSecret to work
existingSecret: null

# This will create an AzureVaultSecret object in k8s, only Multi Key Value Secret are supported by this chart
# ref: https://akv2k8s.io/tutorials/sync/4-multi-key-value-secret/ https://learn.microsoft.com/en-us/azure/key-vault/secrets/multiline-secrets
# Using this feature requires you to define existingSecret
azureVaultSecret:
  # The name of the Azure Key Vault, setting this will create the AzureVaultSecret
  vaultName: null
  # The name of the Multi Key Value Secret
  objectName: ""
  # Make sure this matches the content of the secret, can be either 'application/x-json' or 'application/x-yaml'
  contentType: ""
  # You must set .Values.existingSecret
  secretName: "{{ .Values.existingSecret }}"

# extraEnvVars Array with extra environment variables to add to openzaak
# e.g:
# extraEnvVars:
#   - name: FOO
#     value: "bar"
#
extraEnvVars: []
# extraVolumes Optionally specify extra list of additional volumes
# e.g:
# extraVolumes:
#   - name: verify-certs
#     configMap:
#       name: verify-certs
#
extraVolumes: []
# extraVolumeMounts Optionally specify extra list of additional volumeMounts
# e.g:
# extraVolumeMounts:
#  - name: verify-certs
#    mountPath: /etc/ssl/certs/extra-certs/
extraVolumeMounts: []
# Path to extra certificates or CA (root) certificates, comma seperated
# Wardning, If the file does not exist the pod(s) will not start
# e.g.
# extraVerifyCerts: /etc/ssl/certs/extra-certs/staatdernederlandeng1.pem
extraVerifyCerts: ""

# Extra objects to deploy (value evaluated as a template)
extraDeploy: []

settings:
  allowedHosts: ""
  djangoSettingsModule: openzaak.conf.docker
  useXForwardedHost: true

  # -- Generate secret key at https://djecrety.ir/
  secretKey: ""

  environment: ""

  database:
    host: open-zaak-postgresql
    port: 5432
    username: postgres
    password: SUPER-SECRET
    name: openzaak
    sslmode: prefer

  # -- use 2 if enabling ingress
  numProxies: 1

  email:
    host: localhost
    port: 25
    username: ""
    password: ""
    useTLS: false
    defaultFrom: ""

  flower:
    urlPrefix: ""
    basicAuth: ""

  elasticapm:
    url: ""
    token: ""
    serviceName: ""

  sentry:
    dsn: ""

  # Cache settings, when the redis subchart is enabled these settings will be ignored and caching will default to the redis subchart services.
  cache:
    # default: openzaak-redis-master-0:6379/0
    # axes: openzaak-redis-master-0:6379/0
    # portalLocker: openzaak-redis-master-0:6379/0
    default: ""
    axes: ""
    portalLocker: ""

  celery:
    # Celery cache settings, when the redis subchart is enabled these settings will be ignored and caching will default to the redis subchart services
    # e.g.:
    # brokerUrl: redis://openzaak-redis-master:6379/1
    # resultBackend: redis://openzaak-redis-master:6379/1
    brokerUrl: ""
    resultBackend: ""
    logLevel: debug

  notificationsDisabled: false

  jwtExpiry: 3600

  cmis:
    enabled: false
    mapperFile: ""

  isHttps: true

  debug: false

  uwsgi:
    master: ""
    threads: ""
    processes: ""
    maxRequests: ""
    harakiri: ""

  # -- Disable two factor authentication
  disable2fa: false

worker:
  replicaCount: 1
  concurrency: 4
  podLabels: {}
  resources: {}
  maxWorkerLivenessDelta: ""
  livenessProbe:
    exec:
      command:
        - python
        - /app/bin/check_celery_worker_liveness.py
    initialDelaySeconds: 60
    # Periodeseconds should not exceed maxWorkerLivenessDelta
    periodSeconds: 50
    timeoutSeconds: 15
    failureThreshold: 10
    successThreshold: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

nginx:
  image:
    repository: nginxinc/nginx-unprivileged
    pullPolicy: IfNotPresent
    tag: stable
  service:
    type: ClusterIP
    port: 80
    annotations: {}
  # -- mount existing nginx vhost config
  existingConfigmap: null
  replicaCount: 1
  podLabels: {}
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 101
  autoscaling:
    enabled: false
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  resources: {}

flower:
  enabled: false
  replicaCount: 1
  podLabels: {}
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources: {}

beat:
  replicaCount: 1
  podLabels: {}
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources: {}

##################
# Redis subchart #
##################
redis:
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: ""
    resources:
      requests:
        cpu: 10m
        memory: 20Mi
